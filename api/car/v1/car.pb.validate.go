// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/car/v1/car.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetWechatContactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWechatContactsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWechatContactsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWechatContactsRequestMultiError, or nil if none found.
func (m *GetWechatContactsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWechatContactsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for AppId

	// no validation rules for RelWxid

	// no validation rules for StartWxid

	// no validation rules for StartMakeTime

	// no validation rules for EndMakeTime

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetWechatContactsRequestMultiError(errors)
	}

	return nil
}

// GetWechatContactsRequestMultiError is an error wrapping multiple validation
// errors returned by GetWechatContactsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWechatContactsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWechatContactsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWechatContactsRequestMultiError) AllErrors() []error { return m }

// GetWechatContactsRequestValidationError is the validation error returned by
// GetWechatContactsRequest.Validate if the designated constraints aren't met.
type GetWechatContactsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWechatContactsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWechatContactsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWechatContactsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWechatContactsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWechatContactsRequestValidationError) ErrorName() string {
	return "GetWechatContactsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWechatContactsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWechatContactsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWechatContactsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWechatContactsRequestValidationError{}

// Validate checks the field values on GetWechatContactsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWechatContactsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWechatContactsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWechatContactsReplyMultiError, or nil if none found.
func (m *GetWechatContactsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWechatContactsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Errcode

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetPager()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWechatContactsReplyValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWechatContactsReplyValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPager()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWechatContactsReplyValidationError{
				field:  "Pager",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWechatContactsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWechatContactsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWechatContactsReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWechatContactsReplyMultiError(errors)
	}

	return nil
}

// GetWechatContactsReplyMultiError is an error wrapping multiple validation
// errors returned by GetWechatContactsReply.ValidateAll() if the designated
// constraints aren't met.
type GetWechatContactsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWechatContactsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWechatContactsReplyMultiError) AllErrors() []error { return m }

// GetWechatContactsReplyValidationError is the validation error returned by
// GetWechatContactsReply.Validate if the designated constraints aren't met.
type GetWechatContactsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWechatContactsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWechatContactsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWechatContactsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWechatContactsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWechatContactsReplyValidationError) ErrorName() string {
	return "GetWechatContactsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetWechatContactsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWechatContactsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWechatContactsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWechatContactsReplyValidationError{}

// Validate checks the field values on AuthTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthTokenRequestMultiError, or nil if none found.
func (m *AuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for AppSecret

	// no validation rules for GrandType

	if len(errors) > 0 {
		return AuthTokenRequestMultiError(errors)
	}

	return nil
}

// AuthTokenRequestMultiError is an error wrapping multiple validation errors
// returned by AuthTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthTokenRequestMultiError) AllErrors() []error { return m }

// AuthTokenRequestValidationError is the validation error returned by
// AuthTokenRequest.Validate if the designated constraints aren't met.
type AuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthTokenRequestValidationError) ErrorName() string { return "AuthTokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthTokenRequestValidationError{}

// Validate checks the field values on AuthTokenReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthTokenReplyMultiError,
// or nil if none found.
func (m *AuthTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Errcode

	// no validation rules for Errmsg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthTokenReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthTokenReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthTokenReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthTokenReplyMultiError(errors)
	}

	return nil
}

// AuthTokenReplyMultiError is an error wrapping multiple validation errors
// returned by AuthTokenReply.ValidateAll() if the designated constraints
// aren't met.
type AuthTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthTokenReplyMultiError) AllErrors() []error { return m }

// AuthTokenReplyValidationError is the validation error returned by
// AuthTokenReply.Validate if the designated constraints aren't met.
type AuthTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthTokenReplyValidationError) ErrorName() string { return "AuthTokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthTokenReplyValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NickName

	// no validation rules for Password

	// no validation rules for Mobile

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on UserInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoReplyMultiError, or
// nil if none found.
func (m *UserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Password

	// no validation rules for Mobile

	// no validation rules for NickName

	// no validation rules for Birthday

	// no validation rules for Gender

	// no validation rules for Role

	if len(errors) > 0 {
		return UserInfoReplyMultiError(errors)
	}

	return nil
}

// UserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by UserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type UserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoReplyMultiError) AllErrors() []error { return m }

// UserInfoReplyValidationError is the validation error returned by
// UserInfoReply.Validate if the designated constraints aren't met.
type UserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReplyValidationError) ErrorName() string { return "UserInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReplyValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRequestMultiError, or nil if none found.
func (m *ListUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.UserFilter.(type) {
	case *ListUserRequest_Name:
		if v == nil {
			err := ListUserRequestValidationError{
				field:  "UserFilter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	case *ListUserRequest_Age:
		if v == nil {
			err := ListUserRequestValidationError{
				field:  "UserFilter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Age
	case *ListUserRequest_IsActive:
		if v == nil {
			err := ListUserRequestValidationError{
				field:  "UserFilter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IsActive
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListUserRequestMultiError(errors)
	}

	return nil
}

// ListUserRequestMultiError is an error wrapping multiple validation errors
// returned by ListUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRequestMultiError) AllErrors() []error { return m }

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReplyMultiError, or
// nil if none found.
func (m *ListUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserReplyMultiError(errors)
	}

	return nil
}

// ListUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReplyMultiError) AllErrors() []error { return m }

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on SendJsonRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendJsonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendJsonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendJsonRequestMultiError, or nil if none found.
func (m *SendJsonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendJsonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendJsonRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendJsonRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendJsonRequestValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendJsonRequestMultiError(errors)
	}

	return nil
}

// SendJsonRequestMultiError is an error wrapping multiple validation errors
// returned by SendJsonRequest.ValidateAll() if the designated constraints
// aren't met.
type SendJsonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendJsonRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendJsonRequestMultiError) AllErrors() []error { return m }

// SendJsonRequestValidationError is the validation error returned by
// SendJsonRequest.Validate if the designated constraints aren't met.
type SendJsonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendJsonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendJsonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendJsonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendJsonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendJsonRequestValidationError) ErrorName() string { return "SendJsonRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendJsonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendJsonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendJsonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendJsonRequestValidationError{}

// Validate checks the field values on SendJsonReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendJsonReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendJsonReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendJsonReplyMultiError, or
// nil if none found.
func (m *SendJsonReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendJsonReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Response

	if len(errors) > 0 {
		return SendJsonReplyMultiError(errors)
	}

	return nil
}

// SendJsonReplyMultiError is an error wrapping multiple validation errors
// returned by SendJsonReply.ValidateAll() if the designated constraints
// aren't met.
type SendJsonReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendJsonReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendJsonReplyMultiError) AllErrors() []error { return m }

// SendJsonReplyValidationError is the validation error returned by
// SendJsonReply.Validate if the designated constraints aren't met.
type SendJsonReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendJsonReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendJsonReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendJsonReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendJsonReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendJsonReplyValidationError) ErrorName() string { return "SendJsonReplyValidationError" }

// Error satisfies the builtin error interface
func (e SendJsonReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendJsonReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendJsonReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendJsonReplyValidationError{}

// Validate checks the field values on HealthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthReplyMultiError, or
// nil if none found.
func (m *HealthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HealthReplyMultiError(errors)
	}

	return nil
}

// HealthReplyMultiError is an error wrapping multiple validation errors
// returned by HealthReply.ValidateAll() if the designated constraints aren't met.
type HealthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthReplyMultiError) AllErrors() []error { return m }

// HealthReplyValidationError is the validation error returned by
// HealthReply.Validate if the designated constraints aren't met.
type HealthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthReplyValidationError) ErrorName() string { return "HealthReplyValidationError" }

// Error satisfies the builtin error interface
func (e HealthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthReplyValidationError{}

// Validate checks the field values on GetWechatContactsReply_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWechatContactsReply_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWechatContactsReply_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWechatContactsReply_DataMultiError, or nil if none found.
func (m *GetWechatContactsReply_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWechatContactsReply_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Wxid

	// no validation rules for Avatar

	// no validation rules for Nickname

	// no validation rules for Bitval

	if len(errors) > 0 {
		return GetWechatContactsReply_DataMultiError(errors)
	}

	return nil
}

// GetWechatContactsReply_DataMultiError is an error wrapping multiple
// validation errors returned by GetWechatContactsReply_Data.ValidateAll() if
// the designated constraints aren't met.
type GetWechatContactsReply_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWechatContactsReply_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWechatContactsReply_DataMultiError) AllErrors() []error { return m }

// GetWechatContactsReply_DataValidationError is the validation error returned
// by GetWechatContactsReply_Data.Validate if the designated constraints
// aren't met.
type GetWechatContactsReply_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWechatContactsReply_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWechatContactsReply_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWechatContactsReply_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWechatContactsReply_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWechatContactsReply_DataValidationError) ErrorName() string {
	return "GetWechatContactsReply_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetWechatContactsReply_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWechatContactsReply_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWechatContactsReply_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWechatContactsReply_DataValidationError{}

// Validate checks the field values on GetWechatContactsReply_Pager with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWechatContactsReply_Pager) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWechatContactsReply_Pager with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWechatContactsReply_PagerMultiError, or nil if none found.
func (m *GetWechatContactsReply_Pager) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWechatContactsReply_Pager) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PerPage

	// no validation rules for NumRecords

	// no validation rules for NumPages

	if len(errors) > 0 {
		return GetWechatContactsReply_PagerMultiError(errors)
	}

	return nil
}

// GetWechatContactsReply_PagerMultiError is an error wrapping multiple
// validation errors returned by GetWechatContactsReply_Pager.ValidateAll() if
// the designated constraints aren't met.
type GetWechatContactsReply_PagerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWechatContactsReply_PagerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWechatContactsReply_PagerMultiError) AllErrors() []error { return m }

// GetWechatContactsReply_PagerValidationError is the validation error returned
// by GetWechatContactsReply_Pager.Validate if the designated constraints
// aren't met.
type GetWechatContactsReply_PagerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWechatContactsReply_PagerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWechatContactsReply_PagerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWechatContactsReply_PagerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWechatContactsReply_PagerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWechatContactsReply_PagerValidationError) ErrorName() string {
	return "GetWechatContactsReply_PagerValidationError"
}

// Error satisfies the builtin error interface
func (e GetWechatContactsReply_PagerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWechatContactsReply_Pager.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWechatContactsReply_PagerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWechatContactsReply_PagerValidationError{}

// Validate checks the field values on AuthTokenReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthTokenReply_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthTokenReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthTokenReply_DataMultiError, or nil if none found.
func (m *AuthTokenReply_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthTokenReply_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return AuthTokenReply_DataMultiError(errors)
	}

	return nil
}

// AuthTokenReply_DataMultiError is an error wrapping multiple validation
// errors returned by AuthTokenReply_Data.ValidateAll() if the designated
// constraints aren't met.
type AuthTokenReply_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthTokenReply_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthTokenReply_DataMultiError) AllErrors() []error { return m }

// AuthTokenReply_DataValidationError is the validation error returned by
// AuthTokenReply_Data.Validate if the designated constraints aren't met.
type AuthTokenReply_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthTokenReply_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthTokenReply_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthTokenReply_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthTokenReply_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthTokenReply_DataValidationError) ErrorName() string {
	return "AuthTokenReply_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthTokenReply_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthTokenReply_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthTokenReply_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthTokenReply_DataValidationError{}
