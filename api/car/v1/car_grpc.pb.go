// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: car/v1/car.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Car_CreateUser_FullMethodName        = "/api.car.v1.Car/CreateUser"
	Car_ListUser_FullMethodName          = "/api.car.v1.Car/ListUser"
	Car_SendJson_FullMethodName          = "/api.car.v1.Car/SendJson"
	Car_GetUser_FullMethodName           = "/api.car.v1.Car/GetUser"
	Car_AuthToken_FullMethodName         = "/api.car.v1.Car/AuthToken"
	Car_GetWechatContacts_FullMethodName = "/api.car.v1.Car/GetWechatContacts"
	Car_HealthCheck_FullMethodName       = "/api.car.v1.Car/HealthCheck"
)

// CarClient is the client API for Car service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserInfoReply, error)
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error)
	SendJson(ctx context.Context, in *SendJsonRequest, opts ...grpc.CallOption) (*SendJsonReply, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	AuthToken(ctx context.Context, in *AuthTokenRequest, opts ...grpc.CallOption) (*AuthTokenReply, error)
	GetWechatContacts(ctx context.Context, in *GetWechatContactsRequest, opts ...grpc.CallOption) (*GetWechatContactsReply, error)
	HealthCheck(ctx context.Context, in *structpb.Value, opts ...grpc.CallOption) (*HealthReply, error)
}

type carClient struct {
	cc grpc.ClientConnInterface
}

func NewCarClient(cc grpc.ClientConnInterface) CarClient {
	return &carClient{cc}
}

func (c *carClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserInfoReply, error) {
	out := new(UserInfoReply)
	err := c.cc.Invoke(ctx, Car_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, Car_ListUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) SendJson(ctx context.Context, in *SendJsonRequest, opts ...grpc.CallOption) (*SendJsonReply, error) {
	out := new(SendJsonReply)
	err := c.cc.Invoke(ctx, Car_SendJson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, Car_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) AuthToken(ctx context.Context, in *AuthTokenRequest, opts ...grpc.CallOption) (*AuthTokenReply, error) {
	out := new(AuthTokenReply)
	err := c.cc.Invoke(ctx, Car_AuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) GetWechatContacts(ctx context.Context, in *GetWechatContactsRequest, opts ...grpc.CallOption) (*GetWechatContactsReply, error) {
	out := new(GetWechatContactsReply)
	err := c.cc.Invoke(ctx, Car_GetWechatContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) HealthCheck(ctx context.Context, in *structpb.Value, opts ...grpc.CallOption) (*HealthReply, error) {
	out := new(HealthReply)
	err := c.cc.Invoke(ctx, Car_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServer is the server API for Car service.
// All implementations must embed UnimplementedCarServer
// for forward compatibility
type CarServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*UserInfoReply, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	SendJson(context.Context, *SendJsonRequest) (*SendJsonReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	AuthToken(context.Context, *AuthTokenRequest) (*AuthTokenReply, error)
	GetWechatContacts(context.Context, *GetWechatContactsRequest) (*GetWechatContactsReply, error)
	HealthCheck(context.Context, *structpb.Value) (*HealthReply, error)
	mustEmbedUnimplementedCarServer()
}

// UnimplementedCarServer must be embedded to have forward compatible implementations.
type UnimplementedCarServer struct {
}

func (UnimplementedCarServer) CreateUser(context.Context, *CreateUserRequest) (*UserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCarServer) ListUser(context.Context, *ListUserRequest) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedCarServer) SendJson(context.Context, *SendJsonRequest) (*SendJsonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJson not implemented")
}
func (UnimplementedCarServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCarServer) AuthToken(context.Context, *AuthTokenRequest) (*AuthTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthToken not implemented")
}
func (UnimplementedCarServer) GetWechatContacts(context.Context, *GetWechatContactsRequest) (*GetWechatContactsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWechatContacts not implemented")
}
func (UnimplementedCarServer) HealthCheck(context.Context, *structpb.Value) (*HealthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedCarServer) mustEmbedUnimplementedCarServer() {}

// UnsafeCarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServer will
// result in compilation errors.
type UnsafeCarServer interface {
	mustEmbedUnimplementedCarServer()
}

func RegisterCarServer(s grpc.ServiceRegistrar, srv CarServer) {
	s.RegisterService(&Car_ServiceDesc, srv)
}

func _Car_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Car_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Car_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_SendJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).SendJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Car_SendJson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).SendJson(ctx, req.(*SendJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Car_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_AuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).AuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Car_AuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).AuthToken(ctx, req.(*AuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_GetWechatContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWechatContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).GetWechatContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Car_GetWechatContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).GetWechatContacts(ctx, req.(*GetWechatContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Car_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).HealthCheck(ctx, req.(*structpb.Value))
	}
	return interceptor(ctx, in, info, handler)
}

// Car_ServiceDesc is the grpc.ServiceDesc for Car service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Car_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.car.v1.Car",
	HandlerType: (*CarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Car_CreateUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _Car_ListUser_Handler,
		},
		{
			MethodName: "SendJson",
			Handler:    _Car_SendJson_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Car_GetUser_Handler,
		},
		{
			MethodName: "AuthToken",
			Handler:    _Car_AuthToken_Handler,
		},
		{
			MethodName: "GetWechatContacts",
			Handler:    _Car_GetWechatContacts_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Car_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "car/v1/car.proto",
}
