// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: baby/v1/baby.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Baby_Example_FullMethodName      = "/api.baby.v1.Baby/Example"
	Baby_GetUser_FullMethodName      = "/api.baby.v1.Baby/GetUser"
	Baby_GetStoryList_FullMethodName = "/api.baby.v1.Baby/GetStoryList"
)

// BabyClient is the client API for Baby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BabyClient interface {
	Example(ctx context.Context, in *Null, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	GetStoryList(ctx context.Context, in *GetStoryListRequest, opts ...grpc.CallOption) (*GetStoryListReply, error)
}

type babyClient struct {
	cc grpc.ClientConnInterface
}

func NewBabyClient(cc grpc.ClientConnInterface) BabyClient {
	return &babyClient{cc}
}

func (c *babyClient) Example(ctx context.Context, in *Null, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Baby_Example_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *babyClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, Baby_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *babyClient) GetStoryList(ctx context.Context, in *GetStoryListRequest, opts ...grpc.CallOption) (*GetStoryListReply, error) {
	out := new(GetStoryListReply)
	err := c.cc.Invoke(ctx, Baby_GetStoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BabyServer is the server API for Baby service.
// All implementations must embed UnimplementedBabyServer
// for forward compatibility
type BabyServer interface {
	Example(context.Context, *Null) (*emptypb.Empty, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	GetStoryList(context.Context, *GetStoryListRequest) (*GetStoryListReply, error)
	mustEmbedUnimplementedBabyServer()
}

// UnimplementedBabyServer must be embedded to have forward compatible implementations.
type UnimplementedBabyServer struct {
}

func (UnimplementedBabyServer) Example(context.Context, *Null) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Example not implemented")
}
func (UnimplementedBabyServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedBabyServer) GetStoryList(context.Context, *GetStoryListRequest) (*GetStoryListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryList not implemented")
}
func (UnimplementedBabyServer) mustEmbedUnimplementedBabyServer() {}

// UnsafeBabyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BabyServer will
// result in compilation errors.
type UnsafeBabyServer interface {
	mustEmbedUnimplementedBabyServer()
}

func RegisterBabyServer(s grpc.ServiceRegistrar, srv BabyServer) {
	s.RegisterService(&Baby_ServiceDesc, srv)
}

func _Baby_Example_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BabyServer).Example(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Baby_Example_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BabyServer).Example(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baby_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BabyServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Baby_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BabyServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baby_GetStoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BabyServer).GetStoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Baby_GetStoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BabyServer).GetStoryList(ctx, req.(*GetStoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Baby_ServiceDesc is the grpc.ServiceDesc for Baby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Baby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.baby.v1.Baby",
	HandlerType: (*BabyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Example",
			Handler:    _Baby_Example_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Baby_GetUser_Handler,
		},
		{
			MethodName: "GetStoryList",
			Handler:    _Baby_GetStoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "baby/v1/baby.proto",
}
